
spring.application.name=servicio-items
# Dejar puerto en 0, para que tome valor aleatorio disponible (config instancia Eureka), así desacoplamos el puerto
#server.port=8002
server.port=${PORT:0}

# Balanceo de servicios desde el cliente con Ribbon (Se sustituye con Eureka que hace el balanceo de carga automaticamente)
# Desacoplamos la ubicacion fisica de servers a balancear
# servicio-productos.ribbon.listOfServers=localhost:8001,localhost:9001

# Indicar ruta del server Eureka (cada deploy del cliente envia un latido de corazon a Eureka)
# Cada 30 seg los clientes envian latido para indicar que estan vivos y que pueden contar con ellos
# Si en 90 seg el cliente no manda latidos, el proyecto se elimina del registro de Eureka, cuando se reinicia, nuavamente se agrega a Eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Config Timeout (para que aguante vara cuando consume el resto de servicios) En MS, dfault 60 seg
# Hystrix envuelve a Ribbon, entonces timeoutInMilliseconds > ConnectTimeout + ReadTimeout
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 15000
ribbon.ConnectTimeout: 3000
ribbon.ReadTimeout: 10000


